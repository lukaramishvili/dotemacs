;;;;
;;;;
;;;;

(defun symbol-before-cursor ()
  "Return the symbol (word with optional dashes) before the cursor from current buffer."
  (let ((cursor-at (point)))
    (save-excursion
      (backward-sexp 1)
      (buffer-substring (point) cursor-at))))

(defun insert-semicolon-consider-existing (&optional append-space)
  "If there's a semicolon after cursor, jump through it instead of adding another."
  (interactive)
  (if (equal ";" (buffer-substring (point) (+ (point) 1)))
      (forward-char 1)
    (insert ";"))
  (when append-space
    (if (equal " " (buffer-substring (point) (+ (point) 1)))
        (forward-char 1)
      (insert " "))))

(defun autocomplete-css-property ()
  "When user types keyword followed by a colon, autocomplete from predetermined list."
  (interactive)
  (let* ((inserters '((a-c . "align-content")
                      (a-i . "align-items")
                      (a-s . "align-self")
                      (bg . "background")
                      (b-c . "background-color")
                      (b-i . "background-image")
                      (b-p . "background-position")
                      (b-s . "background-size")
                      (bg-r . "background-repeat")
                      (bo . "border")
                      (bor . "border")
                      (bo-c . "border-color")
                      (bor-c . "border-color")
                      (bo-s . "border-style")
                      (bor-s . "border-style")
                      (box-s . "box-shadow")
                      (bw . "border-width")
                      (b-w . "border-width")
                      (bo-w . "border-width")
                      (bor-w . "border-width")
                      (b-t . "border-top")
                      (b-t-w . "border-top-width")
                      (b-t-s . "border-top-style")
                      (b-t-c . "border-top-color")
                      (b-r . "border-right")
                      (b-r-w . "border-right-width")
                      (b-r-s . "border-right-style")
                      (b-r-c . "border-right-color")
                      (b-b . "border-bottom")
                      (b-b-w . "border-bottom-width")
                      (b-b-s . "border-bottom-style")
                      (b-b-c . "border-bottom-color")
                      (b-l . "border-left")
                      (b-l-w . "border-left-width")
                      (b-l-s . "border-left-style")
                      (b-l-c . "border-left-color")
                      (bo-r . "border-radius")
                      (bor-r . "border-radius")
                      (b-t-l-r . "border-top-left-radius")
                      (b-t-r-r . "border-top-right-radius")
                      (b-b-l-r . "border-bottom-left-radius")
                      (b-b-r-r . "border-bottom-right-radius")
                      (b . "bottom")
                      (c . "color")
                      (co . "content")
                      (cu . "cursor")
                      (cur . "cursor")
                      (d . "display")
                      (f . "flex")
                      (f-d . "flex-direction")
                      (f-g . "flex-grow")
                      (fl . "float")
                      (f-f . "font-family")
                      (f-s . "flex-shrink")
                      (fz . "font-size")
                      (f-st . "font-style")
                      (f-w . "flex-wrap")
                      (fw . "font-weight")
                      ;;
                      (gau . "grid-auto-flow")
                      (gaf . "grid-auto-flow")
                      (g-a-f . "grid-auto-flow")
                      (gcg . "grid-column-gap")
                      (g-c-g . "grid-column-gap")
                      (grg . "grid-row-gap")
                      (g-r-g . "grid-row-gap")
                      (grp . "grid-row-gap")
                      (g-r-p . "grid-row-gap")
                      (gt . "grid-template")
                      (g-t . "grid-template-columns")
                      (gtc . "grid-template-columns")
                      (g-t-c . "grid-template")
                      ;;
                      (h . "height")
                      (j-c . "justify-content")
                      (jc . "justify-content")
                      (l . "left")
                      (l-s . "letter-spacing")
                      (l-s-t . "list-style-type")
                      (lst . "list-style-type")
                      (l-h . "line-height")
                      (lh . "line-height")
                      (m . "margin")
                      (m-t . "margin-top")
                      (mt . "margin-top")
                      (m-r . "margin-right")
                      (mr . "margin-right")
                      (m-b . "margin-bottom")
                      (mb . "margin-bottom")
                      (m-l . "margin-left")
                      (ml . "margin-left")
                      (min-w . "min-width")
                      (min-h . "min-height")
                      (max-w . "max-width")
                      (max-h . "max-height")
                      (o . "order")
                      (or . "order")
                      (op . "opacity")
                      (ov . "overflow")
                      (o-x . "overflow-x")
                      (o-y . "overflow-y")
                      (ov-x . "overflow-x")
                      (ov-y . "overflow-y")
                      (p . "padding")
                      (p-t . "padding-top")
                      (p-r . "padding-right")
                      (p-b . "padding-bottom")
                      (p-l . "padding-left")
                      (p-e . "pointer-events")
                      (po-e . "pointer-events")
                      (po . "position")
                      (r . "right")
                      (t-a . "text-align")
                      (t-d . "text-decoration")
                      (to . "text-overflow")
                      (t-o . "transform-origin")
                      (t-s . "text-shadow")
                      (t-i . "text-indent")
                      (t-t . "text-transform")
                      (t . "top")
                      (tr . "transform")
                      (trn . "transition")
                      (tr-o . "transform-origin")
                      (w-s . "white-space")
                      (w . "width")
                      (w-b . "word-break")
                      (w-w . "word-wrap")
                      (v . "visibility")
                      (vi . "visibility")
                      (v-a . "vertical-align")
                      (z . "z-index")
                      (z-i . "z-index")
                      ))
         (keyword (symbol-before-cursor))
         (found-property (cdr (assoc (intern keyword) inserters)))
         ;;found-property doesn't necessarily start with keyword (e.g. c=color but bc = background-color)
         (completion (concat found-property ": ")))
    (if found-property
        (progn
          (backward-delete-char (length keyword)); delete typed keyword
          (insert completion); cursor will be placed after the inserted text
          (save-excursion ; revert cursor to position before semicolon
            (insert ";")))
      (insert ":"))))

(defun autocomplete-css-value (&optional append-space)
  "When user types a keyword followed by a semicolon, autocomplete common css values"
  (interactive)
  (let* ((inserters '((a . "absolute")
                      (au . "auto")
                      (ba . "baseline")
                      (bas . "baseline")
                      (b . "block")
                      (bo . "bold")
                      (bol . "bold")
                      (bot . "bottom")
                      (both . "both")
                      (b-a . "break-all")
                      (b-w . "break-word")
                      (cap . "capitalize")
                      (c . "center")
                      (co . "column")
                      (col . "column")
                      (cov . "cover")
                      (d . "default")
                      (e . "text-overflow: ellipsis")
                      (el . "text-overflow: ellipsis")
                      (ell . "text-overflow: ellipsis")
                      (fi . "fixed")
                      (f . "flex")
                      (f-e . "flex-end")
                      (f-s . "flex-start")
                      (g . "grid")
                      (h . "hidden")
                      (i . "inherit")
                      (in . "inline")
                      (i-b . "inline-block")
                      (i-f . "inline-flex")
                      (it . "italic")
                      (j . "justify")
                      (k-a . "keep-all")
                      (l . "left")
                      (m . "middle")
                      (n . "none")
                      (n-r . "no-repeat")
                      (nor . "normal")
                      (now . "nowrap")
                      (po . "pointer")
                      (re . "relative")
                      (r . "right")
                      (ro . "row")
                      (s . "stretch")
                      (sc . "scroll")
                      (sol . "solid")
                      (s-a . "space-around")
                      (s-b . "space-between")
                      (st . "static")
                      (te . "text")
                      (t . "top")
                      (tr . "transparent")
                      (u . "underline")
                      (un . "underline")
                      (up . "uppercase")
                      (v . "visible")
                      (vi . "visible")
                      (w . "wrap")
                      (abs . "@include abs(0)")
                      (absr . "@include absr(0)")
                      (absbl . "@include absbl(0)")
                      (absbr . "@include absbr(0)")
                      (abs0 . "@include abs(0)")
                      (abs100 . "@include abs(100%, 0)")
                      (absl100 . "@include abs(100%, 0)")
                      (absr100 . "@include absr(100%, 0)")
                      (abst100 . "@include abs(0, 100%)")
                      (absb100 . "@include absbl(100%, 0)")
                      (absbl100 . "@include absbl(100%, 0)")
                      (absbr100 . "@include absbr(100%, 0)")
                      (cover . "@include abs(0); @include size(100%)")
                      (abscover . "@include abs(0); @include size(100%)")
                      (size . "@include size(100%)")
                      (pse . "content: ''; display: block")
                      (af . "&:after { }")
                      (aft . "&:after { }")
                      (be . "&:before { }")
                      (bef . "&:before { }")
                      (bt . "border-top: 1px solid $gray-border")
                      (br . "border-right: 1px solid $gray-border")
                      (bb . "border-bottom: 1px solid $gray-border")
                      (bl . "border-left: 1px solid $gray-border")
                      (fc . "&:first-child { }")
                      (fi . "&:first-child { }")
                      (fo . "&:focus { }")
                      (ho . "&:hover { }")
                      (hov . "&:hover { }")
                      (hover . "&:hover { }")
                      (la . "&:last-child { }")
                      (lc . "&:last-child { }")
                      (nc . "&:nth-child() { }")
                      (nt . "&:nth-child() { }")
                      (nth . "&:nth-child() { }")
                      (odd . "&:nth-child(odd) { }")
                      (even . "&:nth-child(even) { }")
                      (b50 . "border-radius: 50%")
                      (br50 . "border-radius: 50%")
                      (img . "@include img(1)")
                      (imgc . "@include img-contain(1)")
                      (f-a . "@include flex-apart()")
                      (f-a-c . "@include flex-apart(center)")
                      (f-a-s . "@include flex-apart(stretch)")
                      (f-ce . "@include flex-center()")
                      (f-center . "@include flex-center()")
                      (f-c-c . "@include flex-col-center()")
                      (i-f-c . "@include inline-flex-center()")
                      (f-r . "@include flex-row()")
                      (f-c . "@include flex-col()")
                      (f-col . "@include flex-col()")
                      (rel . "@include rel(0)")
                      (relt . "@include relt(0)")
                      (relr . "@include relr(0)")
                      (relbl . "@include relbl(0)")
                      (relbr . "@include relbr(0)")
                      (rel0 . "@include rel(0)")
                      (fix . "@include fixed(0)")
                      (fixed . "@include fixed(0)")
                      (caps . "@include caps")
                      (fw . "font-weight: bold")
                      (icon . "@include icon()")
                      (pse-ci . "@include pseudo-circle()")
                      (ps-li . "@include pseudo-line(after, $color: )")
                      (ps-li . "@include pseudo-line(after, $color: )")
                      (rot . "transform: rotate(0deg)")
                      (t-l . "text-align: left")
                      (t-c . "text-align: center")
                      (t-r . "text-align: right")
                      (fw . "font-weight: bold")
                      (fwn . "font-weight: normal")
                      (fwb . "font-weight: bold")
                      (item . ".item- {
.item-img {

}
.item-details {

}
.item-title {

}
.item-desc {

}
}")
                      (sem . "@each $semantic-color-name, $semantic-color in $semantic-colors {
        &.CHANGE-ME-#{$semantic-color-name} {
            @include CHANGE-ME($semantic-color-name);
        }
    }")
                      (thin . "@include thin()")
                      ))
         (is-important (equal "!" (buffer-substring (- (point) 1) (point))))
         (keyword (if is-important
                      (progn
                        ;;delete "!" so that symbol-before-cursor can find the keyword
                        ;;otherwise, it would return "!"
                        (if is-important (backward-delete-char 1))
                        (symbol-before-cursor))
                    (symbol-before-cursor)))
         (found-value (cdr (assoc (intern keyword) inserters)))
         (important-suffix (if is-important " !important" ""))
         (completion (concat found-value important-suffix)))
    (if found-value
        (progn
          ;;delete typed keyword
          (backward-delete-char (length keyword))
          ;;cursor will be placed after the inserted text
          (insert completion)))
    ;;add the semicolon or jump through if one's already after cursor
    (insert-semicolon-consider-existing append-space)))


;;; example usage:
;; (add-hook 'scss-mode-hook
;;           (lambda ()
;;             (local-set-key (kbd ":") 'autocomplete-css-property)
;;             (local-set-key (kbd ";") (lambda ()
;;                                        (interactive)
;;                                        (autocomplete-css-value t)))
;;             (local-set-key (kbd "C-;") (lambda ()
;;                                          (interactive)
;;                                          (autocomplete-css-value nil)))))

(provide 'css-autocomplete)

;;; css-autocomplete ends here
